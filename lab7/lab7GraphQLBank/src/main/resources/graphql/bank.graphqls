type Account {
    accountNumber : Int!
    accountHolder: String!
    balance: Float
    transactions: [Transaction]
}

scalar Date

input InputAccount {
    accountNumber : Int!
    accountHolder: String!
    balance: Float
}

enum TransactionType {
    DEPOSIT
    WITHDRAW
}

type Transaction {
    amount: Float!
    transactionType: TransactionType!
#    dateTime: Date
    dateTime: String
}

type Query {
    getAccount(accountNumber : Int!): Account
    get:Account
}

type Mutation {
    createAccount(account :InputAccount!): Account
    deleteAccount(accountNumber : Int!): Account
    deposit(accountNumber : Int!, amount: Float!): Account
    withdraw(accountNumber : Int!, amount: Float!): Account
}